package us.myles.nms;

import us.myles.classtrap.TrapTag;
import us.myles.classtrap.TrapTagType;

//net.minecraft.server.v1_7_R3.PacketDataSerializer
@TrapTag
public interface PacketDataSerializer {
	public boolean equals(java.lang.Object arg0);
	public java.lang.String toString(int arg0, int arg1, java.nio.charset.Charset arg2);
	public java.lang.String toString(java.nio.charset.Charset arg0);
	public java.lang.String toString();
	public int hashCode();
	public int compareTo(ByteBuf arg0);
	public int compareTo(java.lang.Object arg0);
	public int indexOf(int arg0, int arg1, byte arg2);
	public boolean getBoolean(int arg0);
	public byte getByte(int arg0);
	public short getShort(int arg0);
	public char getChar(int arg0);
	public int getInt(int arg0);
	public long getLong(int arg0);
	public float getFloat(int arg0);
	public double getDouble(int arg0);
	public ByteBuf clear();
	public ByteBuf getBytes(int arg0, byte[] arg1);
	public ByteBuf getBytes(int arg0, byte[] arg1, int arg2, int arg3);
	public ByteBuf getBytes(int arg0, java.nio.ByteBuffer arg1);
	public ByteBuf getBytes(int arg0, java.io.OutputStream arg1, int arg2);
	public int getBytes(int arg0, java.nio.channels.GatheringByteChannel arg1, int arg2);
	public ByteBuf getBytes(int arg0, ByteBuf arg1);
	public ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2);
	public ByteBuf getBytes(int arg0, ByteBuf arg1, int arg2, int arg3);
	public byte[] array();
	public int arrayOffset();
	public boolean hasArray();
	public boolean isDirect();
	public int readInt();
	public ByteBuf writeInt(int arg0);
	public ByteBuf copy();
	public ByteBuf copy(int arg0, int arg1);
	public ByteBuf setBoolean(int arg0, boolean arg1);
	public ByteBuf setByte(int arg0, int arg1);
	public ByteBuf setChar(int arg0, int arg1);
	public ByteBuf setDouble(int arg0, double arg1);
	public ByteBuf setFloat(int arg0, float arg1);
	public ByteBuf setInt(int arg0, int arg1);
	public ByteBuf setLong(int arg0, long arg1);
	public ByteBuf setShort(int arg0, int arg1);
	public ByteBuf unwrap();
	public ByteBuf capacity(int arg0);
	public int capacity();
	public java.lang.String c(int arg0);
	public ItemStack c();
	public ByteBuf readBytes(int arg0);
	public ByteBuf readBytes(java.io.OutputStream arg0, int arg1);
	public int readBytes(java.nio.channels.GatheringByteChannel arg0, int arg1);
	public ByteBuf readBytes(byte[] arg0, int arg1, int arg2);
	public ByteBuf readBytes(byte[] arg0);
	public ByteBuf readBytes(ByteBuf arg0, int arg1, int arg2);
	public ByteBuf readBytes(ByteBuf arg0, int arg1);
	public ByteBuf readBytes(java.nio.ByteBuffer arg0);
	public ByteBuf readBytes(ByteBuf arg0);
	public int writeBytes(java.nio.channels.ScatteringByteChannel arg0, int arg1);
	public ByteBuf writeBytes(byte[] arg0, int arg1, int arg2);
	public ByteBuf writeBytes(byte[] arg0);
	public int writeBytes(java.io.InputStream arg0, int arg1);
	public ByteBuf writeBytes(java.nio.ByteBuffer arg0);
	public ByteBuf writeBytes(ByteBuf arg0, int arg1);
	public ByteBuf writeBytes(ByteBuf arg0);
	public ByteBuf writeBytes(ByteBuf arg0, int arg1, int arg2);
	public ByteBuf duplicate();
	public ByteBuf order(java.nio.ByteOrder arg0);
	public java.nio.ByteOrder order();
	public ByteBuf slice(int arg0, int arg1);
	public ByteBuf slice();
	public char readChar();
	public ByteBuf writeChar(int arg0);
	public boolean release();
	public boolean release(int arg0);
	public float readFloat();
	public ByteBuf writeFloat(float arg0);
	public void b(int arg0);
	public NBTTagCompound b();
	public void a(NBTTagCompound arg0);
	public void a(ItemStack arg0);
	public void a(java.lang.String arg0);
	public int a();
	public short readUnsignedByte();
	public boolean readBoolean();
	public ByteBuf writeBoolean(boolean arg0);
	public short readShort();
	public ByteBuf writeShort(int arg0);
	public ByteBuf writeDouble(double arg0);
	public double readDouble();
	public ByteBuf resetWriterIndex();
	public ByteBuf discardSomeReadBytes();
	public ByteBuf resetReaderIndex();
	public int ensureWritable(int arg0, boolean arg1);
	public ByteBuf ensureWritable(int arg0);
	public int forEachByteDesc(ByteBufProcessor arg0);
	public int forEachByteDesc(int arg0, int arg1, ByteBufProcessor arg2);
	public int nioBufferCount();
	public short getUnsignedByte(int arg0);
	public long getUnsignedInt(int arg0);
	public java.nio.ByteBuffer internalNioBuffer(int arg0, int arg1);
	public ByteBuf discardReadBytes();
	public int getUnsignedMedium(int arg0);
	public int maxWritableBytes();
	public ByteBuf markWriterIndex();
	public int getUnsignedShort(int arg0);
	public int readUnsignedShort();
	public int readUnsignedMedium();
	public long readUnsignedInt();
	public boolean hasMemoryAddress();
	public ByteBuf markReaderIndex();
	public int getMedium(int arg0);
	public ByteBuf setBytes(int arg0, byte[] arg1, int arg2, int arg3);
	public ByteBuf setBytes(int arg0, ByteBuf arg1);
	public ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2);
	public int setBytes(int arg0, java.io.InputStream arg1, int arg2);
	public int setBytes(int arg0, java.nio.channels.ScatteringByteChannel arg1, int arg2);
	public ByteBuf setBytes(int arg0, java.nio.ByteBuffer arg1);
	public ByteBuf setBytes(int arg0, ByteBuf arg1, int arg2, int arg3);
	public ByteBuf setBytes(int arg0, byte[] arg1);
	public ByteBuf writeZero(int arg0);
	public java.nio.ByteBuffer nioBuffer(int arg0, int arg1);
	public java.nio.ByteBuffer nioBuffer();
	public ByteBuf setIndex(int arg0, int arg1);
	public boolean isWritable();
	public boolean isWritable(int arg0);
	public int writableBytes();
	public ByteBuf skipBytes(int arg0);
	public int bytesBefore(byte arg0);
	public int bytesBefore(int arg0, int arg1, byte arg2);
	public int bytesBefore(int arg0, byte arg1);
	public int readerIndex();
	public ByteBuf readerIndex(int arg0);
	public int refCnt();
	public ByteBuf writeLong(long arg0);
	public long memoryAddress();
	public boolean isReadable(int arg0);
	public boolean isReadable();
	public long readLong();
	public int maxCapacity();
	public int readMedium();
	public java.nio.ByteBuffer[] nioBuffers();
	public java.nio.ByteBuffer[] nioBuffers(int arg0, int arg1);
	public ByteBuf readSlice(int arg0);
	public ByteBufAllocator alloc();
	public ByteBuf writerIndex(int arg0);
	public int writerIndex();
	public int readableBytes();
	public ByteBuf setZero(int arg0, int arg1);
	public ByteBuf writeMedium(int arg0);
	public int forEachByte(ByteBufProcessor arg0);
	public int forEachByte(int arg0, int arg1, ByteBufProcessor arg2);
	public ReferenceCounted retain();
	@TrapTag(type = TrapTagType.METHOD, value = "retain")
	public ByteBuf retain2();
	public ByteBuf retain(int arg0);
	@TrapTag(type = TrapTagType.METHOD, value = "retain")
	public ReferenceCounted retain2(int arg0);
	public ByteBuf setMedium(int arg0, int arg1);
	public byte readByte();
	public ByteBuf writeByte(int arg0);
}
